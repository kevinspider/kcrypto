import phoenixAES
from itertools import islice
from keyN_to_key0 import aes_key_revese

# debug 第一行提供正确的密文
cipherText = """
bd8335d4b0b6d722b19c45b6a93706b4
bd1335d4e3b6d722b19c45fda93773b4
418335d4b0b6d764b19c1ab6a93b06b4
bd2635d438b6d722b19c45a0a93722b4
568335d4b0b6d71db19ca9b6a9fb06b4
bd8835d49fb6d722b19c4591a9370ab4
bd832ed4b014d7225f9c45b6a93706ec
bd832ed4b014d7225f9c45b6a93706ec
418335d4b0b6d764b19c1ab6a93b06b4
bd83e8d4b0f5d722069c45b6a93706ed
bd2635d438b6d722b19c45a0a93722b4
bd83e8d4b0f5d722069c45b6a93706ed
bd8335bfb0b6e622b17745b6553706b4
418335d4b0b6d764b19c1ab6a93b06b4
018335d4b0b6d79ab19cdbb6a9a506b4
c18335d4b0b6d7dfb19c4bb6a9aa06b4
018335d4b0b6d79ab19cdbb6a9a506b4
bded35d4d8b6d722b19c45c4a93792b4
bd8335aab0b61822b1f445b6983706b4
bd8335aab0b61822b1f445b6983706b4
568335d4b0b6d71db19ca9b6a9fb06b4
bd83351bb0b65d22b1d645b6a03706b4
bd8349d4b090d722049c45b6a93706e5
bd1335d4e3b6d722b19c45fda93773b4
bd83e8d4b0f5d722069c45b6a93706ed
568335d4b0b6d71db19ca9b6a9fb06b4
bd8335bfb0b6e622b17745b6553706b4
568335d4b0b6d71db19ca9b6a9fb06b4
bd8835d49fb6d722b19c4591a9370ab4
bd8335aab0b61822b1f445b6983706b4
bd83e8d4b0f5d722069c45b6a93706ed
bd832ed4b014d7225f9c45b6a93706ec
bd8335bfb0b6e622b17745b6553706b4
bd8335aab0b61822b1f445b6983706b4
bd83e8d4b0f5d722069c45b6a93706ed
bd2635d438b6d722b19c45a0a93722b4
c18335d4b0b6d7dfb19c4bb6a9aa06b4
568335d4b0b6d71db19ca9b6a9fb06b4
bd8335bfb0b6e622b17745b6553706b4
bd83e8d4b0f5d722069c45b6a93706ed
c18335d4b0b6d7dfb19c4bb6a9aa06b4
018335d4b0b6d79ab19cdbb6a9a506b4
bd832ed4b014d7225f9c45b6a93706ec
bd2635d438b6d722b19c45a0a93722b4
bd83352bb0b60422b12d45b6b73706b4
bd2635d438b6d722b19c45a0a93722b4
c18335d4b0b6d7dfb19c4bb6a9aa06b4
568335d4b0b6d71db19ca9b6a9fb06b4
bd83352bb0b60422b12d45b6b73706b4
568335d4b0b6d71db19ca9b6a9fb06b4
c18335d4b0b6d7dfb19c4bb6a9aa06b4
bd832ed4b014d7225f9c45b6a93706ec
bd8335aab0b61822b1f445b6983706b4
568335d4b0b6d71db19ca9b6a9fb06b4
bd832ed4b014d7225f9c45b6a93706ec
bd1335d4e3b6d722b19c45fda93773b4
bded35d4d8b6d722b19c45c4a93792b4
bd8335aab0b61822b1f445b6983706b4
bd83352bb0b60422b12d45b6b73706b4
bded35d4d8b6d722b19c45c4a93792b4
bd8835d49fb6d722b19c4591a9370ab4
bd83351bb0b65d22b1d645b6a03706b4
418335d4b0b6d764b19c1ab6a93b06b4
bd83352bb0b60422b12d45b6b73706b4
418335d4b0b6d764b19c1ab6a93b06b4
bd8835d49fb6d722b19c4591a9370ab4
418335d4b0b6d764b19c1ab6a93b06b4
bd8349d4b090d722049c45b6a93706e5
bd83352bb0b60422b12d45b6b73706b4
c18335d4b0b6d7dfb19c4bb6a9aa06b4
018335d4b0b6d79ab19cdbb6a9a506b4
bd8335aab0b61822b1f445b6983706b4
bd8335aab0b61822b1f445b6983706b4
bd832ed4b014d7225f9c45b6a93706ec
bd83351bb0b65d22b1d645b6a03706b4
bd8349d4b090d722049c45b6a93706e5
bd2635d438b6d722b19c45a0a93722b4
c18335d4b0b6d7dfb19c4bb6a9aa06b4
bded35d4d8b6d722b19c45c4a93792b4
568335d4b0b6d71db19ca9b6a9fb06b4
568335d4b0b6d71db19ca9b6a9fb06b4
568335d4b0b6d71db19ca9b6a9fb06b4
bd8335bfb0b6e622b17745b6553706b4
bd83e8d4b0f5d722069c45b6a93706ed
018335d4b0b6d79ab19cdbb6a9a506b4
bd83351bb0b65d22b1d645b6a03706b4
568335d4b0b6d71db19ca9b6a9fb06b4
bd83352bb0b60422b12d45b6b73706b4
bd1335d4e3b6d722b19c45fda93773b4
bd8835d49fb6d722b19c4591a9370ab4
bd8335bfb0b6e622b17745b6553706b4
bd1335d4e3b6d722b19c45fda93773b4
bd1335d4e3b6d722b19c45fda93773b4
bd1335d4e3b6d722b19c45fda93773b4
bd8835d49fb6d722b19c4591a9370ab4
bd83351bb0b65d22b1d645b6a03706b4
018335d4b0b6d79ab19cdbb6a9a506b4
bd8335bfb0b6e622b17745b6553706b4
018335d4b0b6d79ab19cdbb6a9a506b4
bd8335bfb0b6e622b17745b6553706b4
bd83e8d4b0f5d722069c45b6a93706ed
018335d4b0b6d79ab19cdbb6a9a506b4
568335d4b0b6d71db19ca9b6a9fb06b4
018335d4b0b6d79ab19cdbb6a9a506b4
bd8335bfb0b6e622b17745b6553706b4
018335d4b0b6d79ab19cdbb6a9a506b4
bd83351bb0b65d22b1d645b6a03706b4
bd8835d49fb6d722b19c4591a9370ab4
bd83351bb0b65d22b1d645b6a03706b4
418335d4b0b6d764b19c1ab6a93b06b4
bd2635d438b6d722b19c45a0a93722b4
418335d4b0b6d764b19c1ab6a93b06b4
bd8335aab0b61822b1f445b6983706b4
568335d4b0b6d71db19ca9b6a9fb06b4
bd8835d49fb6d722b19c4591a9370ab4
c18335d4b0b6d7dfb19c4bb6a9aa06b4
bd8349d4b090d722049c45b6a93706e5
bd83e8d4b0f5d722069c45b6a93706ed
bded35d4d8b6d722b19c45c4a93792b4
bd832ed4b014d7225f9c45b6a93706ec
bd2635d438b6d722b19c45a0a93722b4
418335d4b0b6d764b19c1ab6a93b06b4
bd83352bb0b60422b12d45b6b73706b4
bd8335bfb0b6e622b17745b6553706b4
bd8377d4b060d722a69c45b6a9370610
bded35d4d8b6d722b19c45c4a93792b4
bd8335aab0b61822b1f445b6983706b4
bd8377d4b060d722a69c45b6a9370610
bd1335d4e3b6d722b19c45fda93773b4
bd8349d4b090d722049c45b6a93706e5
bd83351bb0b65d22b1d645b6a03706b4
bd8835d49fb6d722b19c4591a9370ab4
bd83e8d4b0f5d722069c45b6a93706ed
bd83352bb0b60422b12d45b6b73706b4
bd8835d49fb6d722b19c4591a9370ab4
018335d4b0b6d79ab19cdbb6a9a506b4
c18335d4b0b6d7dfb19c4bb6a9aa06b4
018335d4b0b6d79ab19cdbb6a9a506b4
018335d4b0b6d79ab19cdbb6a9a506b4
bded35d4d8b6d722b19c45c4a93792b4
bd8835d49fb6d722b19c4591a9370ab4
bded35d4d8b6d722b19c45c4a93792b4
bd2635d438b6d722b19c45a0a93722b4
bd83352bb0b60422b12d45b6b73706b4
bd83351bb0b65d22b1d645b6a03706b4
bd8335bfb0b6e622b17745b6553706b4
bd8835d49fb6d722b19c4591a9370ab4
c18335d4b0b6d7dfb19c4bb6a9aa06b4
bd8335bfb0b6e622b17745b6553706b4
bd2635d438b6d722b19c45a0a93722b4
bd8377d4b060d722a69c45b6a9370610
bd8335aab0b61822b1f445b6983706b4
bd2635d438b6d722b19c45a0a93722b4
568335d4b0b6d71db19ca9b6a9fb06b4
bd1335d4e3b6d722b19c45fda93773b4
bd8377d4b060d722a69c45b6a9370610
bd1335d4e3b6d722b19c45fda93773b4
018335d4b0b6d79ab19cdbb6a9a506b4
bd83351bb0b65d22b1d645b6a03706b4
bd2635d438b6d722b19c45a0a93722b4
bd2635d438b6d722b19c45a0a93722b4
bd83351bb0b65d22b1d645b6a03706b4
018335d4b0b6d79ab19cdbb6a9a506b4
bd2635d438b6d722b19c45a0a93722b4
bd83351bb0b65d22b1d645b6a03706b4
c18335d4b0b6d7dfb19c4bb6a9aa06b4
c18335d4b0b6d7dfb19c4bb6a9aa06b4
bd8377d4b060d722a69c45b6a9370610
bded35d4d8b6d722b19c45c4a93792b4
c18335d4b0b6d7dfb19c4bb6a9aa06b4
bd83e8d4b0f5d722069c45b6a93706ed
bd83352bb0b60422b12d45b6b73706b4
bded35d4d8b6d722b19c45c4a93792b4
bd1335d4e3b6d722b19c45fda93773b4
568335d4b0b6d71db19ca9b6a9fb06b4
bd2635d438b6d722b19c45a0a93722b4
418335d4b0b6d764b19c1ab6a93b06b4
bd832ed4b014d7225f9c45b6a93706ec
418335d4b0b6d764b19c1ab6a93b06b4
bd1335d4e3b6d722b19c45fda93773b4
bd83352bb0b60422b12d45b6b73706b4
bd83e8d4b0f5d722069c45b6a93706ed
c18335d4b0b6d7dfb19c4bb6a9aa06b4
bd1335d4e3b6d722b19c45fda93773b4
bd83e8d4b0f5d722069c45b6a93706ed
bd83e8d4b0f5d722069c45b6a93706ed
bd83e8d4b0f5d722069c45b6a93706ed
c18335d4b0b6d7dfb19c4bb6a9aa06b4
418335d4b0b6d764b19c1ab6a93b06b4
bded35d4d8b6d722b19c45c4a93792b4
018335d4b0b6d79ab19cdbb6a9a506b4
568335d4b0b6d71db19ca9b6a9fb06b4
bd8835d49fb6d722b19c4591a9370ab4
018335d4b0b6d79ab19cdbb6a9a506b4
bd1335d4e3b6d722b19c45fda93773b4
bd83e8d4b0f5d722069c45b6a93706ed
568335d4b0b6d71db19ca9b6a9fb06b4
bd2635d438b6d722b19c45a0a93722b4
bd83351bb0b65d22b1d645b6a03706b4
418335d4b0b6d764b19c1ab6a93b06b4
bd83e8d4b0f5d722069c45b6a93706ed
"""

with open("./tracefile", "wb+") as f:
    f.write(cipherText.encode("utf-8"))
    f.seek(0)
    data = list(islice(f, 1, 2))[0].strip(b"\n")
    round_key_len = len(data)


# 参数 3 代表解密
result = phoenixAES.crack_file('tracefile', [], True, False, 3)
if result is not None:
    if "." in result:
        print("result is", result)
        raise ValueError("Warning! need more dfa cipherText!!!")
    else:
        # debug 因为phoenixAES 只能处理aes128的, 所以得到的是K10
        n = 10
        print(f"K{n}: {result}")
        print("aes_key_reverse")
        aes_key_revese(result, n)
