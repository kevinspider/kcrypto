"""
分组长度
    16字节, 密文长度都是16字节的整数倍

填充方式
    - PKCS7 (使用的最多)
        填充字节数和填充内容都是: 分组大小 - 数据长度对分组大小的余数
            kevinSpider 是密文, 一共11个字节 -> 6b 65 76 69 6e 53 70 69 64 65 72
            填充字节数: 16 - (11 % 16) = 0x5
            填充内容: 16 - (11 % 16) = 0x5
        填充后的数据: 16个字节                  6b 65 76 69 6e 53 70 69 64 65 72 05 05 05 05 05

    - zero 填充
        填充字节数: 分组大小 - 数据长度对分组大小的余数;
        填充内容: 0x0

    ps: 如果输入的密文本身就是一个分组长度 16 字节; 那么也需要进行填充
        输入 16 字节 6b 65 76 69 6e 53 70 69 64 65 72 05 05 05 05 05
        那么填充以后的结果, 就是填充 16 - (16 % 16) = 0x10
                    6b 65 76 69 6e 53 70 69 64 65 72 05 05 05 05 05
                    10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10
    ps: 无论输入是多少, 都是需要进行填充的!!!

加密模式
    - CBC
        - 需要一个16字节的IV
        - 明文的前16字节首先和IV异或, 得到result1
        - 然后使用 ECB 模式加密这 16 字节 result1 的数据, 得到的结果作为第一组密文; 同时作为下一轮的 iv 与下一组明文进行异或
        - 如果只知道密钥而不知道 IV, 解出来就是明文和iv 异或的结果
    - ECB

算法部分:
    密钥长度
        16字节 对应 aes-128
        24字节 对应 aes-192
        32字节 对应 aes-256
    iv 长度, 如果存在iv, 则iv长度恒定为16字节
    算法循环
        密钥长度每增加8字节, 算法循环次数就增加两轮;
        aes-128 循环 10轮
        aes-192 循环 12轮
        aes-256 循环 14轮
"""